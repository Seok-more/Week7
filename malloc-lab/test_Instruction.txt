mm_2.c를 테스트하려면 Makefile에서 mm.o 대신 mm_2.o를 사용하도록 변경하면 됩니다!
함수 이름이 표준대로 맞으면 mdriver.c는 건드릴 필요 없습니다.

이거를
OBJS = mdriver.o mm.o memlib.o fsecs.o fcyc.o clock.o ftimer.o

mdriver: $(OBJS)
	$(CC) $(CFLAGS) -o mdriver $(OBJS)

mm.o: mm.c mm.h memlib.h

->

요렇게
OBJS = mdriver.o mm_2.o memlib.o fsecs.o fcyc.o clock.o ftimer.o

mdriver: $(OBJS)
	$(CC) $(CFLAGS) -o mdriver $(OBJS)

mm_2.o: mm_2.c mm.h memlib.h

//////////////////////////////////////////////

./mdriver
 ./mdriver -t ./traces -v

mm_2 : explicit
mm_3 : 언리얼 참고 구현 해볼까

1. Bin 크기/분포 촘촘하게 튜닝 (Unreal-style, fragmentation 줄이기)
2. best-fit+주소순 탐색/분할 정책 엄격화 (남은 공간이 충분할 때만 분할)
3. 큰 요청 별도 bin/large block list 관리 (BIN_MAX_SIZE 이상 요청시 별도 처리)


Copilot: Disable 했음

(1) Free List 구조
Segregated Free List를 사용합니다.

크기별로 여러 개의 free list(=pool table, bin)를 관리합니다.
각 bin은 16/32/48/...와 같이 정해진 크기별로 블록을 관리하며, 요청된 크기에 맞는 bin에서 빠르게 할당/해제합니다.
대형 블록(특정 크기 이상)은 별도의 OS bucket(=direct OS alloc)에서 관리합니다.
Explicit Free List는 일부 할당자(옛날 방식 또는 특정 플랫폼 최적화)에서 사용되지만, 언리얼의 대표적인 binned 할당자들은 크기별로 분리된 segregated list를 중심으로 동작합니다.

(2) Find-fit 정책
First-fit 또는 Exact-fit을 사용합니다.
요청 크기가 bin에 정확히 맞으면 해당 bin에서 할당.
맞지 않으면 가장 작은 fitting bin(=next larger bin)에서 할당.
큰 요청은 OS에서 직접 할당(페이지 단위 등).
Best-fit은 쓰지 않습니다. (탐색 비용이 크기 때문임)
(3) Realloc 구현 방식
In-place 확장/축소 시도: 만약 현재 bin에서 충분하다면, 같은 bin에서 재사용.
Bin 변경/OS realloc 필요 시: 새 bin/OS 영역에 할당 후 데이터 복사, 기존 블록 free.
최적화: 작은 realloc은 같은 pool 내에서 빠르게 처리, 큰 realloc은 메타데이터/복사 최소화.
(4) 주요 최적화
Segregated free list: 크기별로 분리해 탐색 속도, 단편화 모두 개선.
메타데이터 최소화: 블록/풀 헤더 등 메모리 오버헤드 최소화.
Thread-local cache: 각 쓰레드마다 소규모 캐시를 두어 lock contention 완화.
Bin promotion: 큰 alignment 요청시 다음 bin으로 승격하여 낭비 줄임.
Lazy coalescing, global recycler, cached OS frees 등 다양한 고급 메모리 관리 기법을 사용.
2. 적용 전략 (mm_3.c 개선 방향)
목표

malloc-lab의 채점 기준(성능, utilization, correctness)에 맞추어
언리얼 엔진의 핵심 구조(분리형 free list, fast first-fit, in-place realloc 등)를 반영
기존 mm.h 매크로는 모두 유지, 필요한 추가 매크로만 삽입
주요 변경점

segregated free list 구현: 크기별로 여러 free list를 둠
first-fit/exact-fit 정책: 각 bin에서 가장 먼저 찾은 블록 할당
in-place realloc: 같은 bin이면 in-place, 아니면 새 할당 후 복사
매크로 추가: BIN_COUNT, BIN_MIN_SIZE, BIN_MAX_SIZE 등 삽입
최소 블록 크기, alignment 보장
코드 구조 정리 및 최적화


| -----------| ---------------------- |
| 0              | amptjp-bal.rep        |
| 1              | cccp-bal.rep            |
| 2              | cp-decl-bal.rep       |
| 3              | expr-bal.rep            |
| 4              | coalescing-bal.rep  |
| 5              | random-bal.rep      |
| 6              | random2-bal.rep    |
| 7              | binary-bal.rep         |
| 8              | binary2-bal.rep       |
| 9              | realloc-bal.rep         |
| 10             | realloc2-bal.rep       |

